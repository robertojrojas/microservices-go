// Code generated by protoc-gen-go.
// source: birds.proto
// DO NOT EDIT!

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	birds.proto

It has these top-level messages:
	Empty
	Bird
	BirdId
	BirdCatalog
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Bird_BirdType int32

const (
	Bird_BLACKBIRD              Bird_BirdType = 0
	Bird_BLACKBIRDSCHICKADEE    Bird_BirdType = 1
	Bird_CHICKADEESCROW         Bird_BirdType = 2
	Bird_CROWSDOVE              Bird_BirdType = 3
	Bird_DOVESDUCK              Bird_BirdType = 4
	Bird_DUCKSFINCH             Bird_BirdType = 5
	Bird_FINCHESFLYCATCHER      Bird_BirdType = 6
	Bird_FLYCATCHERSGAMEBIRD    Bird_BirdType = 7
	Bird_GAMEBIRDSGULL          Bird_BirdType = 8
	Bird_GULLSHAWK              Bird_BirdType = 9
	Bird_HAWKSHERON             Bird_BirdType = 10
	Bird_HERONSHUMMINGBIRD      Bird_BirdType = 11
	Bird_HUMMINGBIRDSKINGFISHER Bird_BirdType = 12
	Bird_KINGFISHERSNUTHATCH    Bird_BirdType = 13
	Bird_NUTHATCHESOWL          Bird_BirdType = 14
	Bird_OWLSSHOREBIRD          Bird_BirdType = 15
	Bird_SHOREBIRDSSPARROW      Bird_BirdType = 16
	Bird_SPARROWSSWALLOW        Bird_BirdType = 17
	Bird_SWALLOWSTHRUSH         Bird_BirdType = 18
	Bird_THRUSHESWARBLER        Bird_BirdType = 19
	Bird_WARBLERSWOODPECKER     Bird_BirdType = 20
	Bird_WOODPECKERSWREN        Bird_BirdType = 21
	Bird_WRENS                  Bird_BirdType = 22
	Bird_UNKNOWN                Bird_BirdType = 23
)

var Bird_BirdType_name = map[int32]string{
	0:  "BLACKBIRD",
	1:  "BLACKBIRDSCHICKADEE",
	2:  "CHICKADEESCROW",
	3:  "CROWSDOVE",
	4:  "DOVESDUCK",
	5:  "DUCKSFINCH",
	6:  "FINCHESFLYCATCHER",
	7:  "FLYCATCHERSGAMEBIRD",
	8:  "GAMEBIRDSGULL",
	9:  "GULLSHAWK",
	10: "HAWKSHERON",
	11: "HERONSHUMMINGBIRD",
	12: "HUMMINGBIRDSKINGFISHER",
	13: "KINGFISHERSNUTHATCH",
	14: "NUTHATCHESOWL",
	15: "OWLSSHOREBIRD",
	16: "SHOREBIRDSSPARROW",
	17: "SPARROWSSWALLOW",
	18: "SWALLOWSTHRUSH",
	19: "THRUSHESWARBLER",
	20: "WARBLERSWOODPECKER",
	21: "WOODPECKERSWREN",
	22: "WRENS",
	23: "UNKNOWN",
}
var Bird_BirdType_value = map[string]int32{
	"BLACKBIRD":              0,
	"BLACKBIRDSCHICKADEE":    1,
	"CHICKADEESCROW":         2,
	"CROWSDOVE":              3,
	"DOVESDUCK":              4,
	"DUCKSFINCH":             5,
	"FINCHESFLYCATCHER":      6,
	"FLYCATCHERSGAMEBIRD":    7,
	"GAMEBIRDSGULL":          8,
	"GULLSHAWK":              9,
	"HAWKSHERON":             10,
	"HERONSHUMMINGBIRD":      11,
	"HUMMINGBIRDSKINGFISHER": 12,
	"KINGFISHERSNUTHATCH":    13,
	"NUTHATCHESOWL":          14,
	"OWLSSHOREBIRD":          15,
	"SHOREBIRDSSPARROW":      16,
	"SPARROWSSWALLOW":        17,
	"SWALLOWSTHRUSH":         18,
	"THRUSHESWARBLER":        19,
	"WARBLERSWOODPECKER":     20,
	"WOODPECKERSWREN":        21,
	"WRENS":                  22,
	"UNKNOWN":                23,
}

func (x Bird_BirdType) String() string {
	return proto.EnumName(Bird_BirdType_name, int32(x))
}
func (Bird_BirdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Bird struct {
	Name string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id   int64         `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Age  int32         `protobuf:"varint,3,opt,name=age" json:"age,omitempty"`
	Type Bird_BirdType `protobuf:"varint,4,opt,name=type,enum=Bird_BirdType" json:"type,omitempty"`
}

func (m *Bird) Reset()                    { *m = Bird{} }
func (m *Bird) String() string            { return proto.CompactTextString(m) }
func (*Bird) ProtoMessage()               {}
func (*Bird) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type BirdId struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *BirdId) Reset()                    { *m = BirdId{} }
func (m *BirdId) String() string            { return proto.CompactTextString(m) }
func (*BirdId) ProtoMessage()               {}
func (*BirdId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type BirdCatalog struct {
	Birds []*Bird `protobuf:"bytes,1,rep,name=birds" json:"birds,omitempty"`
}

func (m *BirdCatalog) Reset()                    { *m = BirdCatalog{} }
func (m *BirdCatalog) String() string            { return proto.CompactTextString(m) }
func (*BirdCatalog) ProtoMessage()               {}
func (*BirdCatalog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BirdCatalog) GetBirds() []*Bird {
	if m != nil {
		return m.Birds
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*Bird)(nil), "Bird")
	proto.RegisterType((*BirdId)(nil), "BirdId")
	proto.RegisterType((*BirdCatalog)(nil), "BirdCatalog")
	proto.RegisterEnum("Bird_BirdType", Bird_BirdType_name, Bird_BirdType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for BirdRepository service

type BirdRepositoryClient interface {
	AllBirds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BirdCatalog, error)
	CreateBird(ctx context.Context, in *Bird, opts ...grpc.CallOption) (*Bird, error)
	ReadBird(ctx context.Context, in *BirdId, opts ...grpc.CallOption) (*Bird, error)
	UpdateBird(ctx context.Context, in *Bird, opts ...grpc.CallOption) (*Bird, error)
	DeleteBird(ctx context.Context, in *BirdId, opts ...grpc.CallOption) (*Empty, error)
}

type birdRepositoryClient struct {
	cc *grpc.ClientConn
}

func NewBirdRepositoryClient(cc *grpc.ClientConn) BirdRepositoryClient {
	return &birdRepositoryClient{cc}
}

func (c *birdRepositoryClient) AllBirds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BirdCatalog, error) {
	out := new(BirdCatalog)
	err := grpc.Invoke(ctx, "/BirdRepository/AllBirds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdRepositoryClient) CreateBird(ctx context.Context, in *Bird, opts ...grpc.CallOption) (*Bird, error) {
	out := new(Bird)
	err := grpc.Invoke(ctx, "/BirdRepository/CreateBird", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdRepositoryClient) ReadBird(ctx context.Context, in *BirdId, opts ...grpc.CallOption) (*Bird, error) {
	out := new(Bird)
	err := grpc.Invoke(ctx, "/BirdRepository/ReadBird", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdRepositoryClient) UpdateBird(ctx context.Context, in *Bird, opts ...grpc.CallOption) (*Bird, error) {
	out := new(Bird)
	err := grpc.Invoke(ctx, "/BirdRepository/UpdateBird", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *birdRepositoryClient) DeleteBird(ctx context.Context, in *BirdId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BirdRepository/DeleteBird", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BirdRepository service

type BirdRepositoryServer interface {
	AllBirds(context.Context, *Empty) (*BirdCatalog, error)
	CreateBird(context.Context, *Bird) (*Bird, error)
	ReadBird(context.Context, *BirdId) (*Bird, error)
	UpdateBird(context.Context, *Bird) (*Bird, error)
	DeleteBird(context.Context, *BirdId) (*Empty, error)
}

func RegisterBirdRepositoryServer(s *grpc.Server, srv BirdRepositoryServer) {
	s.RegisterService(&_BirdRepository_serviceDesc, srv)
}

func _BirdRepository_AllBirds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdRepositoryServer).AllBirds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BirdRepository/AllBirds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdRepositoryServer).AllBirds(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdRepository_CreateBird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bird)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdRepositoryServer).CreateBird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BirdRepository/CreateBird",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdRepositoryServer).CreateBird(ctx, req.(*Bird))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdRepository_ReadBird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirdId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdRepositoryServer).ReadBird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BirdRepository/ReadBird",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdRepositoryServer).ReadBird(ctx, req.(*BirdId))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdRepository_UpdateBird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bird)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdRepositoryServer).UpdateBird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BirdRepository/UpdateBird",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdRepositoryServer).UpdateBird(ctx, req.(*Bird))
	}
	return interceptor(ctx, in, info, handler)
}

func _BirdRepository_DeleteBird_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BirdId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BirdRepositoryServer).DeleteBird(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BirdRepository/DeleteBird",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BirdRepositoryServer).DeleteBird(ctx, req.(*BirdId))
	}
	return interceptor(ctx, in, info, handler)
}

var _BirdRepository_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BirdRepository",
	HandlerType: (*BirdRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllBirds",
			Handler:    _BirdRepository_AllBirds_Handler,
		},
		{
			MethodName: "CreateBird",
			Handler:    _BirdRepository_CreateBird_Handler,
		},
		{
			MethodName: "ReadBird",
			Handler:    _BirdRepository_ReadBird_Handler,
		},
		{
			MethodName: "UpdateBird",
			Handler:    _BirdRepository_UpdateBird_Handler,
		},
		{
			MethodName: "DeleteBird",
			Handler:    _BirdRepository_DeleteBird_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("birds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x93, 0xcf, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0x43, 0x6c, 0xf3, 0x67, 0x48, 0x9c, 0xcd, 0xa6, 0x49, 0x10, 0xad, 0xd4, 0xca, 0xa7,
	0xa8, 0x07, 0x0e, 0xf4, 0x09, 0x8c, 0x31, 0xd8, 0xb2, 0xb1, 0xa3, 0x1d, 0x5c, 0xab, 0xbd, 0x39,
	0xb2, 0x15, 0x21, 0x41, 0x8d, 0xc0, 0x17, 0x9e, 0xaa, 0x4f, 0xd1, 0x17, 0xe9, 0x93, 0x74, 0x67,
	0x6d, 0xfe, 0x5c, 0x7a, 0x81, 0xdf, 0xf7, 0xcd, 0xce, 0xce, 0x68, 0xf9, 0x80, 0xfe, 0xdb, 0x6a,
	0x97, 0xef, 0x47, 0xdb, 0x5d, 0x59, 0x95, 0x56, 0x07, 0x0c, 0x77, 0xb3, 0xad, 0x0e, 0xd6, 0x1f,
	0x1d, 0xf4, 0x89, 0x2c, 0x70, 0x0e, 0xfa, 0xaf, 0x6c, 0x53, 0x0c, 0x5a, 0x5f, 0x5a, 0x2f, 0x3d,
	0xa1, 0x98, 0x9b, 0x70, 0xbd, 0xca, 0x07, 0xd7, 0xd2, 0xd1, 0x84, 0x24, 0xce, 0x40, 0xcb, 0xde,
	0x8b, 0x81, 0x26, 0x0d, 0x43, 0x10, 0x72, 0x0b, 0xf4, 0xea, 0xb0, 0x2d, 0x06, 0xba, 0xb4, 0xcc,
	0xb1, 0x39, 0xa2, 0xab, 0xd4, 0xc7, 0x52, 0xba, 0x42, 0xd5, 0xac, 0xbf, 0x1a, 0x74, 0x8f, 0x16,
	0xbf, 0x85, 0xde, 0x24, 0xb4, 0x9d, 0x60, 0xe2, 0x8b, 0x29, 0xbb, 0xe2, 0xcf, 0xf0, 0x70, 0x92,
	0xe8, 0x78, 0xbe, 0x13, 0xd8, 0x53, 0xd7, 0x65, 0x2d, 0xb9, 0x8e, 0x79, 0x92, 0xe8, 0x88, 0x38,
	0x65, 0xd7, 0xd4, 0x4b, 0x84, 0xd3, 0xf8, 0xbb, 0xcb, 0x34, 0x92, 0x44, 0x38, 0x4d, 0x9c, 0x80,
	0xe9, 0x72, 0x59, 0x20, 0xc2, 0x99, 0x1f, 0x39, 0x1e, 0x33, 0xf8, 0x23, 0xdc, 0x2b, 0x74, 0x71,
	0x16, 0xfe, 0x70, 0xec, 0xa5, 0x24, 0xc1, 0xda, 0x34, 0xf1, 0xac, 0x71, 0x6e, 0x2f, 0x5c, 0xb5,
	0x4a, 0x87, 0xdf, 0xc3, 0xed, 0x51, 0xe1, 0x3c, 0x09, 0x43, 0xd6, 0xa5, 0x09, 0x44, 0xe8, 0xd9,
	0x69, 0xc0, 0x7a, 0x34, 0x81, 0x08, 0x65, 0x63, 0x1c, 0x31, 0xa0, 0x09, 0x0a, 0xd1, 0x4b, 0x16,
	0x0b, 0x3f, 0x9a, 0xab, 0x8b, 0xfa, 0x7c, 0x08, 0x4f, 0x17, 0x06, 0x06, 0x12, 0x66, 0x3e, 0x35,
	0xb1, 0x1b, 0x9a, 0x7e, 0xd6, 0x18, 0x25, 0x4b, 0x8f, 0x16, 0x61, 0xb7, 0x34, 0xfd, 0xa8, 0x5c,
	0x8c, 0xd3, 0x90, 0x99, 0x64, 0x49, 0x40, 0xf4, 0x62, 0x51, 0xef, 0x78, 0x47, 0x13, 0x4f, 0x12,
	0xf1, 0xd5, 0x16, 0xf4, 0x30, 0x8c, 0x3f, 0xc0, 0x5d, 0x23, 0x10, 0x53, 0x3b, 0x0c, 0xa5, 0x79,
	0x4f, 0x2f, 0xd8, 0x08, 0x5c, 0x7a, 0x22, 0x41, 0x8f, 0x71, 0x3a, 0x58, 0xb3, 0x2b, 0x4b, 0x62,
	0x12, 0xca, 0x9d, 0x1e, 0xf8, 0x13, 0xf0, 0x46, 0x60, 0x1a, 0xc7, 0xd3, 0x57, 0xd7, 0x09, 0xa4,
	0xff, 0x81, 0x0e, 0x9f, 0x35, 0xa6, 0xc2, 0x8d, 0xd8, 0x23, 0xef, 0x81, 0x41, 0x84, 0xec, 0x89,
	0xf7, 0xa1, 0x93, 0x44, 0x41, 0x14, 0xa7, 0x11, 0x7b, 0xb6, 0x06, 0xd0, 0xa6, 0xdf, 0xd8, 0xcf,
	0x9b, 0xd0, 0xb4, 0x54, 0x46, 0x24, 0x59, 0x5f, 0xa1, 0x4f, 0x15, 0x27, 0xab, 0xb2, 0x75, 0xf9,
	0xce, 0x3f, 0x82, 0xa1, 0x82, 0x28, 0x4f, 0x68, 0x2f, 0xfd, 0xb1, 0xa1, 0xd2, 0x22, 0x6a, 0x6f,
	0xfc, 0xbb, 0x05, 0xa6, 0xd2, 0xc5, 0xb6, 0xdc, 0xaf, 0xaa, 0x72, 0x77, 0x90, 0x09, 0xeb, 0xda,
	0xeb, 0x35, 0x99, 0x7b, 0xde, 0x1e, 0xa9, 0xd0, 0x0e, 0x6f, 0x46, 0x17, 0x37, 0x5a, 0x57, 0xfc,
	0x13, 0x80, 0xb3, 0x2b, 0xb2, 0xaa, 0x50, 0x49, 0xae, 0xaf, 0x1c, 0xd6, 0x5f, 0xaa, 0xda, 0x15,
	0x45, 0x96, 0xab, 0x5a, 0x67, 0x54, 0x6f, 0x79, 0x59, 0x85, 0x64, 0x9b, 0xff, 0xaf, 0xf7, 0xb3,
	0x0c, 0x55, 0xb1, 0x2e, 0x9a, 0xea, 0xa9, 0xbb, 0x59, 0xc4, 0xba, 0x9a, 0x74, 0x7f, 0xb6, 0x37,
	0x65, 0x5e, 0xac, 0xf7, 0x6f, 0x6d, 0xf5, 0xcf, 0xfa, 0xf6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x49,
	0x94, 0x54, 0x7b, 0x68, 0x03, 0x00, 0x00,
}
